import React, { useState, useRef, useMemo, useEffect } from 'react';
import { Patient } from '../types/view';
import { Question, Category } from '../types/patient';
import { usePatients } from '../context/PatientContext';
import Modal from './Modal';
import PatientEditModal from './modals/PatientEditModal';
import CreatePatientModal from './modals/CreatePatientModal';
import ColumnVisibilityModal from './modals/ColumnVisibilityModal';
import SimplePrescriptionModal from './modals/prescriptions/SimplePrescriptionModal';
import { cn } from '../lib/utils';
import { Trash2, X, Search } from 'lucide-react';
import { collection, getDocs, query, orderBy } from 'firebase/firestore';
import { db } from '../config/firebase';
import FieldDisplay from './fields/FieldDisplay';
import SelectionButton from './SelectionButton';

interface PatientTableProps {
  patients: Patient[];
  fields: Question[];
  showLastModified: boolean;
  onPatientSelect: (patient: Patient | null) => void;
  onToggleColumnVisibility: (columnId: string) => void;
  showColumnVisibilityModal: boolean;
  onCloseColumnVisibilityModal: () => void;
  columnVisibility: Record<string, boolean>;
}

export default function PatientTable({
  patients = [],
  fields: initialFields = [],
  showLastModified,
  onPatientSelect,
  onToggleColumnVisibility,
  showColumnVisibilityModal,
  onCloseColumnVisibilityModal,
  columnVisibility
}: PatientTableProps) {
  const [selectedRows, setSelectedRows] = useState<string[]>([]);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [editingPatient, setEditingPatient] = useState<{ patient: Patient; focusedField?: string } | null>(null);
  const [showSummaryForPatient, setShowSummaryForPatient] = useState<Patient | null>(null);
  const [fields, setFields] = useState<Question[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [patientFields, setPatientFields] = useState<Record<string, any>>({});
  const [practitioners, setPractitioners] = useState<Record<string, any>>({});
  const [selectedPractitioners, setSelectedPractitioners] = useState<string[]>([]);
  const { deletePatient, updatePatient } = usePatients();
  const tableRef = useRef<HTMLDivElement>(null);
  const [showPrescriptionModal, setShowPrescriptionModal] = useState(false);
  const [selectedPatientForPrescription, setSelectedPatientForPrescription] = useState<Patient | null>(null);

  useEffect(() => {
    async function fetchFields() {
      try {
        // Charger les praticiens
        const practitionersCollection = collection(db, 'practitioners');
        const practitionersSnapshot = await getDocs(practitionersCollection);
        const practitionersData: Record<string, any> = {};
        practitionersSnapshot.forEach(doc => {
          practitionersData[doc.id] = { id: doc.id, ...doc.data() };
        });
        setPractitioners(practitionersData);
        
        // Initialiser les praticiens sélectionnés en fonction de columnVisibility
        if (columnVisibility['practitioner'] === true) {
          setSelectedPractitioners(Object.keys(practitionersData));
        } else {
          setSelectedPractitioners([]);
        }

        // Charger les catégories
        const categoriesCollection = collection(db, 'categories');
        const categoriesQuery = query(categoriesCollection, orderBy('order'));
        const categoriesSnapshot = await getDocs(categoriesQuery);
        const categoriesData = categoriesSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        })) as Category[];
        setCategories(categoriesData);

        // Charger tous les champs
        const fieldsCollection = collection(db, 'fields');
        const fieldsSnapshot = await getDocs(fieldsCollection);
        const fieldsData = fieldsSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
          type: doc.data().type || 'text',
          text: doc.data().name || doc.data().text || '',
          category: doc.data().categoryId || 'general'
        })) as Question[];
        setFields(fieldsData);

        // Charger les valeurs des champs pour chaque patient
        const patientFieldsData: Record<string, any> = {};
        for (const patient of patients) {
          const patientFields: Record<string, any> = {};
          fieldsData.forEach(field => {
            patientFields[field.id] = patient.fields?.[field.id] || null;
          });
          patientFieldsData[patient.id] = patientFields;
        }
        setPatientFields(patientFieldsData);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    }

    fetchFields();
  }, [patients]);

  // Trier les patients par date de dernière modification
  const sortedPatients = useMemo(() => {
    return [...patients].sort((a, b) => {
      const dateA = a.updatedAt ? new Date(a.updatedAt).getTime() : 0;
      const dateB = b.updatedAt ? new Date(b.updatedAt).getTime() : 0;
      return dateB - dateA; // Tri décroissant (plus récent en premier)
    });
  }, [patients]);

  // Filtrer les patients en fonction des praticiens sélectionnés
  const filteredPatients = useMemo(() => {
    console.log('Filtering patients with columnVisibility:', columnVisibility['practitioner']);
    console.log('Selected practitioners:', selectedPractitioners);
    // Si la colonne est masquée, on renvoie tous les patients
    if (columnVisibility['practitioner'] === false) {
      return sortedPatients;
    }
    // Sinon, on filtre par praticiens sélectionnés
    return sortedPatients.filter(patient => 
      selectedPractitioners.includes(patient.practitioner)
    );
  }, [sortedPatients, selectedPractitioners, columnVisibility]);

  const columns = useMemo(() => {
    // Grouper les champs par catégorie
    const fieldsByCategory = fields.reduce((acc, field) => {
      const categoryId = field.category || 'general';
      if (!acc[categoryId]) {
        acc[categoryId] = [];
      }
      acc[categoryId].push(field);
      return acc;
    }, {} as Record<string, Question[]>);

    // Obtenir les catégories triées par leur ordre
    const sortedCategories = [...categories].sort((a, b) => (a.order || 0) - (b.order || 0));

    // Créer les colonnes de base
    const baseColumns = [
      {
        id: 'practitioner',
        name: 'Praticien',
        minWidth: 120,
        fixed: false,
        visible: columnVisibility['practitioner'] === true
      },
      {
        id: 'lastModified',
        name: 'Dernière modification',
        minWidth: 180,
        fixed: false,
        visible: showLastModified && columnVisibility['lastModified'] === true
      }
    ];

    // Créer les colonnes pour chaque champ, en respectant l'ordre des catégories
    const fieldColumns = sortedCategories.flatMap(category => {
      const categoryFields = fieldsByCategory[category.id] || [];
      return categoryFields.map(field => ({
        id: field.id,
        name: field.text,
        minWidth: 150,
        fixed: false,
        visible: columnVisibility[field.id] === true
      }));
    });

    return [...baseColumns, ...fieldColumns];
  }, [fields, categories, columnVisibility, showLastModified]);

  const handleSelectAll = (e: React.ChangeEvent<HTMLInputElement>) => {
    const checked = e.target.checked;
    setSelectedRows(checked ? sortedPatients.map(p => p.id) : []);
  };

  const handleSelectRow = (patientId: string) => {
    setSelectedRows(prev => 
      prev.includes(patientId)
        ? prev.filter(id => id !== patientId)
        : [...prev, patientId]
    );
  };

  const handleCellClick = (patient: Patient, fieldId: string) => {
    setEditingPatient({ patient, focusedField: fieldId });
  };

  const handleDelete = async () => {
    try {
      for (const patientId of selectedRows) {
        await deletePatient(patientId);
      }
      setSelectedRows([]);
      setShowDeleteConfirm(false);
    } catch (error) {
      console.error('Error deleting patients:', error);
    }
  };

  const handleCellChange = async (patientId: string, fieldId: string, value: any) => {
    try {
      await updatePatient(patientId, { [fieldId]: value });
    } catch (error) {
      console.error('Error updating patient:', error);
    }
  };

  const formatDate = (dateString?: string) => {
    if (!dateString) return '-';
    const date = new Date(dateString);
    
    // Si la date est invalide, retourner le timestamp original
    if (isNaN(date.getTime())) {
      return dateString;
    }

    // Tableau des mois en français
    const mois = [
      'janvier', 'février', 'mars', 'avril', 'mai', 'juin',
      'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'
    ];

    const jour = date.getDate();
    const moisStr = mois[date.getMonth()];
    const annee = date.getFullYear();
    const heures = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');

    // Si c'est aujourd'hui
    const aujourdhui = new Date();
    if (date.toDateString() === aujourdhui.toDateString()) {
      return `Aujourd'hui à ${heures}:${minutes}`;
    }

    // Si c'est hier
    const hier = new Date(aujourdhui);
    hier.setDate(hier.getDate() - 1);
    if (date.toDateString() === hier.toDateString()) {
      return `Hier à ${heures}:${minutes}`;
    }

    // Pour les autres dates
    return `${jour} ${moisStr} ${annee} à ${heures}:${minutes}`;
  };

  const renderPractitioner = (practitionerId: string) => {
    // Chercher le praticien dans la liste des praticiens
    const practitioner = practitioners[practitionerId];

    if (!practitioner) return '-';

    return (
      <span 
        className="px-2 py-1 rounded text-white" 
        style={{ backgroundColor: practitioner.color || 'var(--theme-color)' }}
      >
        {practitioner.name || '-'}
      </span>
    );
  };

  const renderCellContent = (patient: Patient, field: any) => {
    // Pour les champs spéciaux stockés directement dans le patient
    if (field.id === 'practitioner') {
      return renderPractitioner(patient.practitioner);
    }
    if (field.id === 'lastModified') {
      return formatDate(patient.updatedAt);
    }

    // Pour les autres champs, chercher dans patientFields
    const patientFieldValues = patientFields[patient.id] || {};
    const value = patient.fields?.[field.id];

    // Trouver le champ correspondant
    const fieldConfig = fields.find(f => f.id === field.id);

    if (!fieldConfig) {
      return value || '-';
    }

    // Pour les champs avec choix (comme la classe squelettique)
    if (fieldConfig.type === 'radio' || fieldConfig.type === 'multiple') {
      const choices = fieldConfig.choices || [];
      
      // Pour les choix multiples
      if (fieldConfig.type === 'multiple' && Array.isArray(value)) {
        return (
          <div className="flex flex-wrap gap-1">
            {value.map(choiceId => {
              const choice = choices.find(c => c.id === choiceId);
              if (!choice) return null;
              return (
                <span
                  key={choiceId}
                  className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium"
                  style={{
                    backgroundColor: `${choice.color || '#4D7EF9'}20`,
                    color: choice.color || '#4D7EF9'
                  }}
                >
                  {choice.text || choice.name}
                </span>
              );
            })}
          </div>
        );
      }
      
      // Pour les choix uniques (radio)
      const choice = choices.find(c => c.id === value);
      if (choice) {
        return (
          <span
            className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium"
            style={{
              backgroundColor: `${choice.color || '#4D7EF9'}20`,
              color: choice.color || '#4D7EF9'
            }}
          >
            {choice.text || choice.name}
          </span>
        );
      }
    }

    return value || '-';
  };

  const handleToggleColumn = (columnId: string) => {
    console.log('PatientTable handleToggleColumn called for:', columnId);
    if (columnId === 'practitioner') {
      const willBeVisible = !columnVisibility[columnId];
      console.log('Practitioner column will be:', willBeVisible ? 'visible' : 'hidden');
      if (willBeVisible) {
        // Si on rend la colonne visible, sélectionner tous les praticiens
        setSelectedPractitioners(Object.keys(practitioners));
      } else {
        // Si on masque la colonne, désélectionner tous les praticiens
        setSelectedPractitioners([]);
      }
    }
    onToggleColumnVisibility(columnId);
  };

  const allColumns = useMemo(() => {
    const baseColumns = [
      {
        id: 'fileNumber',
        name: 'N° Dossier',
        fixed: true,
        canHide: false
      },
      {
        id: 'practitioner',
        name: 'Praticien',
        fixed: false,
        canHide: true
      },
      {
        id: 'lastModified',
        name: 'Dernière modification',
        fixed: false,
        canHide: true
      }
    ];

    const fieldColumns = fields.map(field => ({
      id: field.id,
      name: field.text,
      fixed: false,
      canHide: true
    }));

    return [...baseColumns, ...fieldColumns];
  }, [fields]);

  const handleEditSave = async (updatedPatient: any) => {
    try {
      await updatePatient(editingPatient.patient.id, updatedPatient);
      setEditingPatient(null);
    } catch (error) {
      console.error('Error updating patient:', error);
    }
  };

  const handlePrescriptionClick = (patient: Patient, e: React.MouseEvent) => {
    e.stopPropagation(); // Empêcher la propagation au parent
    setSelectedPatientForPrescription(patient);
    setShowPrescriptionModal(true);
  };

  const [showCreateModal, setShowCreateModal] = useState(false);

  const handleTogglePractitioner = (practitionerId: string) => {
    setSelectedPractitioners(prev => {
      if (prev.includes(practitionerId)) {
        return prev.filter(id => id !== practitionerId);
      }
      return [...prev, practitionerId];
    });
  };

  return (
    <div className="relative">
      {/* Boutons d'action */}
      <div className="mb-4 flex justify-end items-center">
        <div className="flex space-x-2">
          {selectedRows.length > 0 && (
            <button
              onClick={() => setShowDeleteConfirm(true)}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              Supprimer ({selectedRows.length})
            </button>
          )}
          <button
            onClick={() => setShowCreateModal(true)}
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-[var(--theme-color)] hover:bg-[var(--theme-color)]/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--theme-color)]"
          >
            Nouveau patient
          </button>
        </div>
      </div>

      <div className="w-full overflow-x-auto" style={{ position: 'relative' }}>
        <table className="min-w-full table-auto border-collapse">
          <thead className="bg-gray-50 dark:bg-gray-700">
            <tr>
              {/* Colonne de sélection fixe */}
              <th 
                className="sticky left-0 z-20 bg-gray-50 dark:bg-gray-700 w-[40px] px-3 py-3.5 border-b border-r-0 border-gray-200 dark:border-gray-600"
              >
                <div className="flex justify-center items-center">
                  <input
                    type="checkbox"
                    checked={selectedRows.length === filteredPatients.length}
                    onChange={handleSelectAll}
                    className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600 dark:border-gray-600 dark:bg-gray-700"
                  />
                </div>
              </th>
              {/* Colonne numéro de dossier fixe */}
              <th 
                className="sticky left-[40px] z-20 bg-gray-50 dark:bg-gray-700 px-3 py-3.5 text-center text-sm font-semibold text-gray-900 dark:text-white border-b border-r border-gray-200 dark:border-gray-600"
              >
                N° Dossier
              </th>
              {/* Autres colonnes */}
              {columns
                .filter(column => column.visible !== false)
                .map((column) => (
                  <th
                    key={column.id}
                    scope="col"
                    className="px-3 py-3.5 text-center text-sm font-semibold text-gray-900 dark:text-white border-b border-gray-200 dark:border-gray-600"
                  >
                    {column.name}
                  </th>
                ))}
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200 dark:divide-gray-600 bg-white dark:bg-gray-800">
            {filteredPatients.map((patient) => (
              <tr key={patient.id}>
                {/* Colonne de sélection fixe */}
                <td 
                  className="sticky left-0 z-20 bg-white dark:bg-gray-800 w-[40px] px-3 py-4 border-r-0 border-gray-200 dark:border-gray-600"
                >
                  <div className="flex justify-center items-center">
                    <input
                      type="checkbox"
                      checked={selectedRows.includes(patient.id)}
                      onChange={() => handleSelectRow(patient.id)}
                      className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600 dark:border-gray-600 dark:bg-gray-700"
                    />
                  </div>
                </td>
                {/* Colonne numéro de dossier fixe */}
                <td 
                  className="sticky left-[40px] z-20 bg-white dark:bg-gray-800 whitespace-nowrap px-3 py-4 text-sm text-gray-900 dark:text-white border-r border-gray-200 dark:border-gray-600"
                  onClick={() => handleCellClick(patient, 'fileNumber')}
                >
                  <div className="flex items-center space-x-2">
                    <span>{patient.fileNumber}</span>
                    <button
                      onClick={(e) => handlePrescriptionClick(patient, e)}
                      className="w-6 h-6 flex items-center justify-center text-xs font-medium text-indigo-600 bg-indigo-100 rounded-full hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:bg-indigo-900 dark:text-indigo-200 dark:hover:bg-indigo-800"
                      title="Prescription"
                    >
                      P
                    </button>
                  </div>
                </td>
                {/* Autres colonnes */}
                {columns
                  .filter(column => column.visible !== false)
                  .map((column) => (
                    <td
                      key={column.id}
                      className="whitespace-nowrap px-3 py-4 text-sm text-gray-900 dark:text-white cursor-pointer text-center"
                      onClick={() => handleCellClick(patient, column.id)}
                    >
                      {renderCellContent(patient, column)}
                    </td>
                  ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {showDeleteConfirm && (
        <Modal
          isOpen={true}
          onClose={() => setShowDeleteConfirm(false)}
          title="Confirmer la suppression"
        >
          <p className="text-gray-500 dark:text-gray-400">
            Êtes-vous sûr de vouloir supprimer {selectedRows.length} patient(s) ?
          </p>
          <div className="mt-4 flex justify-end gap-3">
            <button
              onClick={() => setShowDeleteConfirm(false)}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Annuler
            </button>
            <button
              onClick={handleDelete}
              className="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700"
            >
              Supprimer
            </button>
          </div>
        </Modal>
      )}

      {editingPatient && (
        <PatientEditModal
          isOpen={!!editingPatient}
          onClose={() => setEditingPatient(null)}
          patient={editingPatient.patient}
          focusedField={editingPatient.focusedField}
          fields={fields}
          categories={categories}
          practitioners={practitioners}
          onSave={handleEditSave}
          columnVisibility={columnVisibility}
        />
      )}

      {selectedPatientForPrescription && (
        <SimplePrescriptionModal
          isOpen={showPrescriptionModal}
          onClose={() => {
            setShowPrescriptionModal(false);
            setSelectedPatientForPrescription(null);
          }}
          patientId={selectedPatientForPrescription.id}
          initialPrescriptions={selectedPatientForPrescription.prescriptions}
          onSave={async (prescriptions) => {
            try {
              await updatePatient(selectedPatientForPrescription.id, {
                prescriptions,
                updatedAt: new Date().toISOString()
              });
              setShowPrescriptionModal(false);
              setSelectedPatientForPrescription(null);
            } catch (error) {
              console.error('Error saving prescriptions:', error);
            }
          }}
        />
      )}

      {showColumnVisibilityModal && (
        <ColumnVisibilityModal
          isOpen={showColumnVisibilityModal}
          onClose={onCloseColumnVisibilityModal}
          columns={columns}
          onToggleColumn={onToggleColumnVisibility}
          columnVisibility={columnVisibility}
          practitioners={practitioners}
          selectedPractitioners={selectedPractitioners}
          onTogglePractitioner={handleTogglePractitioner}
        />
      )}

      <CreatePatientModal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        columnVisibility={columnVisibility}
      />
    </div>
  );
}